; ---- set permissions --- 
whoami
ls -la /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
sudo /usr/sbin/usermod -aG dialout fred
id -nG fred
or
chmod o+rw /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0

; ---- read Sega FFB Controller --- 
cat -v < /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
screen /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0 9600

; ---- write Sega FFB Controller --- 
stty -F /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0 speed 9600 cs8 -cstopb -parenb &&
echo -ne '\033[2J' > /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
echo -e "\x7E\x03\xD0\xAF und normaler Text" > /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0

; ---- scripting --- 
stty -F /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0 9600 raw -echo   #CONFIGURE SERIAL PORT
exec 3</dev/serial/by-id/usb-1a86_USB_Serial-if00-port0                   #REDIRECT SERIAL OUTPUT TO FD 3
  cat <&3 > /tmp/ttyDump.dat &                                            #REDIRECT SERIAL OUTPUT TO FILE
  PID=$!                                                                  #SAVE PID TO KILL CAT
    echo "R" > /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0           #SEND COMMAND STRING TO SERIAL PORT
    sleep 0.2s                                                            #WAIT FOR RESPONSE
  kill $PID                                                               #KILL CAT PROCESS
  wait $PID 2>/dev/null                                                   #SUPRESS "Terminated" output

exec 3<&-                                                                 #FREE FD 3
cat /tmp/ttyDump.dat                                                      #DUMP CAPTURED DATA

touch ./virtualSerialIN
touch ./virtualSerialOUT


// some tests
; test spring effect
echo -e "\x80\x7F\x00\x00\x00\x7F" > /home/fred/Documents/openFFB/virtualSerialIN
; test friction effect
echo -e "\x80\x00\x7F\x00\x00\x7F" > /home/fred/Documents/openFFB/virtualSerialIN
; test constant right effect
echo -e "\x80\x00\x00\x01\xFF\x7E" > /home/fred/Documents/openFFB/virtualSerialIN
; test constant left effect
echo -e "\x80\x00\x00\x00\xFF\x7F" > /home/fred/Documents/openFFB/virtualSerialIN
;clear 
echo -e "\x80\x00\x00\x00\x00\x00" > /home/fred/Documents/openFFB/virtualSerialIN

// TO Do
- make startup and end effet
- test SDL effects as parameters
- implement game file as parameter
- Make install kit
- test config and game files
- ceck if we must use SDL_HAPTIC_INFINITY in SDL_HapticRunEffect or in the structure
  (To repeat the effect over and over indefinitely, set iterations to SDL_HAPTIC_INFINITY. (Repeats the envelope - attack and fade.) To make one instance of the effect last indefinitely (so the effect does not fade), set the effect's length in its structure/union to SDL_HAPTIC_INFINITY instead.)
- test openFFB as a service


install new-lg4ff
==================
; check your installed kernel version
apt search linux-headers-$(uname -r)

; check if kernel headers are already installed
ls -l /usr/src/linux-headers-$(uname -r)

; if not installed
sudo apt install linux-headers-$(uname -r)

; install dkms
sudo apt-get install dkms

;create folder
sudo mkdir /usr/src/new-lg4ff

;download package
wget https://github.com/berarma/new-lg4ff/archive/refs/heads/master.zip

; extract and copy to destination folder
sudo unzip ./master.zip "new-lg4ff-master/*" -d  "/usr/src/new-lg4ff/"

;compile and install package
sudo dkms install /usr/src/new-lg4ff

sudo dkms uninstall new-lg4ff/-0.3.1 -k $(uname -r)

;uninstall and remove
sudo dkms uninstall new-lg4ff -v 0.3.1
sudo dkms remove new-lg4ff -v 0.3.1 --all





cd build
sudo cmake --install .

;install ffb tools
sudo apt-get install gcc-multilib
git clone https://github.com/berarma/ffbtools
cd ffbtools
make
./build/ffbtools



